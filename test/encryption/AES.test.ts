import { expect, it } from 'vitest';
import { decrypt, encrypt } from '../../src/encryption/AES';

// HEX: 546869732069732061207465737420737472696e672c20616e64206974206973207175697465206c6f6e672c20736f207468617420697420697320656e737572656420746861742074686520616c676f726974686d2073706c697473206c6f6e6720626c6f636b73206f66206461746120696e746f206d756c7469706c6520626c6f636b7320616e6420656e637279707473206561636820636f72726563746c79
const correctPlain = new Uint8Array([
  84, 104, 105, 115, 32, 105, 115, 32, 97, 32, 116, 101, 115, 116, 32, 115, 116, 114, 105, 110, 103, 44, 32, 97, 110,
  100, 32, 105, 116, 32, 105, 115, 32, 113, 117, 105, 116, 101, 32, 108, 111, 110, 103, 44, 32, 115, 111, 32, 116, 104,
  97, 116, 32, 105, 116, 32, 105, 115, 32, 101, 110, 115, 117, 114, 101, 100, 32, 116, 104, 97, 116, 32, 116, 104, 101,
  32, 97, 108, 103, 111, 114, 105, 116, 104, 109, 32, 115, 112, 108, 105, 116, 115, 32, 108, 111, 110, 103, 32, 98, 108,
  111, 99, 107, 115, 32, 111, 102, 32, 100, 97, 116, 97, 32, 105, 110, 116, 111, 32, 109, 117, 108, 116, 105, 112, 108,
  101, 32, 98, 108, 111, 99, 107, 115, 32, 97, 110, 100, 32, 101, 110, 99, 114, 121, 112, 116, 115, 32, 101, 97, 99,
  104, 32, 99, 111, 114, 114, 101, 99, 116, 108, 121
]);

// HEX: 67556B58703273357638792F423F4528472B4B6250655368566D597133743677
const key = new Uint8Array([
  103, 85, 107, 88, 112, 50, 115, 53, 118, 56, 121, 47, 66, 63, 69, 40, 71, 43, 75, 98, 80, 101, 83, 104, 86, 109, 89,
  113, 51, 116, 54, 119
]);

// HEX: 8a9c109df1a6c447f8bb9cc71a353800ca3f5a0f8f5010ecfd52346972edd63c6c2abfb8785cde55cc8fe9e343312bf453223b01214959db5c13886094f6bfb0a05ccb3460cc2dda20338dfc6498ca9efcb5d7766b55cb383388396570c3904d58225f643ad988de6e1740e5ad5d68f1021e2e373ea318f14100ed61f9fa1f4da14c07783ed328675defba48f355f451042745c507c34e44b38c25df6d2817d4e7483522a12eed1f99c37788558ea9e5
const correctCipher = new Uint8Array([
  138, 156, 16, 157, 241, 166, 196, 71, 248, 187, 156, 199, 26, 53, 56, 0, 202, 63, 90, 15, 143, 80, 16, 236, 253, 82,
  52, 105, 114, 237, 214, 60, 108, 42, 191, 184, 120, 92, 222, 85, 204, 143, 233, 227, 67, 49, 43, 244, 83, 34, 59, 1,
  33, 73, 89, 219, 92, 19, 136, 96, 148, 246, 191, 176, 160, 92, 203, 52, 96, 204, 45, 218, 32, 51, 141, 252, 100, 152,
  202, 158, 252, 181, 215, 118, 107, 85, 203, 56, 51, 136, 57, 101, 112, 195, 144, 77, 88, 34, 95, 100, 58, 217, 136,
  222, 110, 23, 64, 229, 173, 93, 104, 241, 2, 30, 46, 55, 62, 163, 24, 241, 65, 0, 237, 97, 249, 250, 31, 77, 161, 76,
  7, 120, 62, 211, 40, 103, 93, 239, 186, 72, 243, 85, 244, 81, 4, 39, 69, 197, 7, 195, 78, 68, 179, 140, 37, 223, 109,
  40, 23, 212, 231, 72, 53, 34, 161, 46, 237, 31, 153, 195, 119, 136, 85, 142, 169, 229
]);

it('encrypts correctly', () => {
  const cipher = encrypt(correctPlain, { aesKey: key });

  expect(cipher).toEqual(correctCipher);
});

it('decrypts correctly', () => {
  const plain = decrypt(correctCipher, { aesKey: key });

  expect(plain).toEqual(correctPlain);
});
